{"ast":null,"code":"var _jsxFileName = \"D:\\\\medhelp\\\\Web\\\\src\\\\Patient\\\\PatientViewAppointment.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { gapi } from \"gapi-script\";\nimport Calendar from \"react-calendar\";\nimport \"react-calendar/dist/Calendar.css\";\nimport axios from \"axios\";\nimport { MyApiUrl } from \"../services/service\";\nimport moment from \"moment\";\nimport \"../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = \"42125472539-jjbouj26bil9h1icga858o7ng5p3u247.apps.googleusercontent.com\";\nconst API_KEY = \"AIzaSyDY14P01K1UdYumM_gYFC55qNKtPFH0UVA\";\nconst CALENDAR_ID = \"primary\";\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\nconst PatientViewAppointment = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  let PatientID = localStorage.getItem(\"PatientID\");\n  const [countdown, setCountdown] = useState(\"\");\n  const GetPatientProfile = () => {\n    axios.get(MyApiUrl + \"AppointmentsByPatientEvent/\" + PatientID).then(response => {\n      if (response.data.length > 0) {\n        console.log(response.data[1].start.dateTime);\n        setEvents(response.data);\n        const sortedAppointments = response.data.sort((a, b) => new Date(b.start.dateTime) - new Date(a.start.dateTime));\n        console.log(\"Most recent appointment: \", sortedAppointments[0]);\n\n        // Assuming you want to update the countdown for the first appointment\n        updateCountdown(sortedAppointments[0].start.dateTime); // Change index if needed\n      }\n    }).catch(error => {\n      console.error(\"Error fetching patient profile:\", error);\n    });\n  };\n  const updateCountdown = appointmentDate => {\n    const appointmentTime = moment(appointmentDate);\n    const currentTime = moment();\n    console.log(\"Current Time: \", currentTime.format());\n    console.log(\"Appointment Time: \", appointmentTime.format());\n    if (appointmentTime.isAfter(currentTime)) {\n      const totalMs = appointmentTime.diff(currentTime);\n      const msPerDay = 1000 * 60 * 60 * 24;\n      const msPerHour = 1000 * 60 * 60;\n      const msPerMinute = 1000 * 60;\n      const msPerSecond = 1000;\n      const days = Math.floor(totalMs / msPerDay);\n      const hours = Math.floor(totalMs % msPerDay / msPerHour);\n      const minutes = Math.floor(totalMs % msPerHour / msPerMinute);\n      const seconds = Math.floor(totalMs % msPerMinute / msPerSecond);\n      let timeRemaining = \"\";\n      if (days > 0) {\n        timeRemaining = `${days} day(s) ${hours} hour(s) left`;\n      } else if (hours > 0) {\n        timeRemaining = `${hours} hour(s) ${minutes} minute(s) left`;\n      } else if (minutes > 0) {\n        timeRemaining = `${minutes} minute(s) ${seconds} second(s) left`;\n      } else {\n        timeRemaining = `${seconds} second(s) left`;\n      }\n      setCountdown(timeRemaining);\n    } else {\n      setCountdown(\"Your appointment has already passed.\");\n    }\n  };\n  const initClient = () => {\n    console.log(\"Initializing Google API Client...\");\n    gapi.client.init({\n      apiKey: API_KEY,\n      clientId: CLIENT_ID,\n      discoveryDocs: [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"],\n      scope: SCOPES\n    }).then(() => {\n      console.log(\"gapi client initialized.\");\n    }).catch(error => {\n      console.error(\"Error initializing gapi client: \", error);\n    });\n  };\n  const eventsForDays = events.reduce((acc, event) => {\n    const eventDate = new Date(event.start.dateTime || event.start.date);\n    const dateKey = eventDate.toLocaleDateString();\n    if (!acc[dateKey]) {\n      acc[dateKey] = [];\n    }\n    acc[dateKey].push(event);\n    return acc;\n  }, {});\n  useEffect(() => {\n    // Fetch patient profile when the component mounts\n    gapi.load(\"client:auth2\", initClient);\n    GetPatientProfile();\n\n    // Set interval to update the countdown every second\n    // const interval = setInterval(() => {\n    //   if (events.length > 0) {\n    //     updateCountdown(events[0].dateTime); // Update countdown for the first event\n    //   }\n    // }, 1000);\n\n    // // Clean up the interval when the component unmounts\n    // return () => clearInterval(interval);\n  }, [events]);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 pb-4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"about-us container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mw-930\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"row\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-6\",\n              children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"page-title\",\n                children: \"All Your Appointment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 137,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"col-md-6\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"page-title\",\n                style: {\n                  textAlign: \"right\",\n                  fontSize: \"25px\",\n                  fontWeight: \"600\",\n                  marginTop: \"2%\"\n                },\n                children: [\"Upcoming Appointment: \", countdown]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        className: \"container\",\n        style: {\n          marginBottom: \"10%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-12\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"calendar-container\",\n              style: {\n                width: \"100%\",\n                maxWidth: \"100%\",\n                padding: 0\n              },\n              children: /*#__PURE__*/_jsxDEV(Calendar, {\n                tileContent: ({\n                  date,\n                  view\n                }) => {\n                  const dateKey = date.toLocaleDateString();\n                  if (eventsForDays[dateKey]) {\n                    return /*#__PURE__*/_jsxDEV(\"ul\", {\n                      style: {\n                        margin: 0,\n                        padding: 0,\n                        fontSize: \"10px\",\n                        marginTop: \"10%\"\n                      },\n                      children: eventsForDays[dateKey].map(event => /*#__PURE__*/_jsxDEV(\"li\", {\n                        style: {\n                          color: \"blue\",\n                          fontSize: \"12px\"\n                        },\n                        children: event.summary\n                      }, event.id, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 177,\n                        columnNumber: 29\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 25\n                    }, this);\n                  }\n                  return null;\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 163,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n_s(PatientViewAppointment, \"fvNABcu9A49Vk+ljk2oSLbV0Hko=\");\n_c = PatientViewAppointment;\nexport default PatientViewAppointment;\nvar _c;\n$RefreshReg$(_c, \"PatientViewAppointment\");","map":{"version":3,"names":["React","useState","useEffect","gapi","Calendar","axios","MyApiUrl","moment","jsxDEV","_jsxDEV","CLIENT_ID","API_KEY","CALENDAR_ID","SCOPES","PatientViewAppointment","_s","events","setEvents","PatientID","localStorage","getItem","countdown","setCountdown","GetPatientProfile","get","then","response","data","length","console","log","start","dateTime","sortedAppointments","sort","a","b","Date","updateCountdown","catch","error","appointmentDate","appointmentTime","currentTime","format","isAfter","totalMs","diff","msPerDay","msPerHour","msPerMinute","msPerSecond","days","Math","floor","hours","minutes","seconds","timeRemaining","initClient","client","init","apiKey","clientId","discoveryDocs","scope","eventsForDays","reduce","acc","event","eventDate","date","dateKey","toLocaleDateString","push","load","Fragment","children","className","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","fontSize","fontWeight","marginTop","marginBottom","width","maxWidth","padding","tileContent","view","margin","map","color","summary","id","_c","$RefreshReg$"],"sources":["D:/medhelp/Web/src/Patient/PatientViewAppointment.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { gapi } from \"gapi-script\";\r\nimport Calendar from \"react-calendar\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\nimport axios from \"axios\";\r\nimport { MyApiUrl } from \"../services/service\";\r\nimport moment from \"moment\";\r\nimport \"../App.css\";\r\n\r\nconst CLIENT_ID =\r\n  \"42125472539-jjbouj26bil9h1icga858o7ng5p3u247.apps.googleusercontent.com\";\r\nconst API_KEY = \"AIzaSyDY14P01K1UdYumM_gYFC55qNKtPFH0UVA\";\r\nconst CALENDAR_ID = \"primary\";\r\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.readonly\";\r\n\r\nconst PatientViewAppointment = () => {\r\n  const [events, setEvents] = useState([]);\r\n  let PatientID = localStorage.getItem(\"PatientID\");\r\n  const [countdown, setCountdown] = useState(\"\");\r\n\r\n  const GetPatientProfile = () => {\r\n    axios\r\n      .get(MyApiUrl + \"AppointmentsByPatientEvent/\" + PatientID)\r\n      .then((response) => {\r\n        if (response.data.length > 0) {\r\n          console.log(response.data[1].start.dateTime);\r\n          setEvents(response.data);\r\n\r\n          const sortedAppointments = response.data.sort(\r\n            (a, b) => new Date(b.start.dateTime) - new Date(a.start.dateTime)\r\n          );\r\n\r\n          console.log(\"Most recent appointment: \", sortedAppointments[0]);\r\n\r\n          // Assuming you want to update the countdown for the first appointment\r\n          updateCountdown(sortedAppointments[0].start.dateTime); // Change index if needed\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching patient profile:\", error);\r\n      });\r\n  };\r\n\r\n  const updateCountdown = (appointmentDate) => {\r\n    const appointmentTime = moment(appointmentDate);\r\n    const currentTime = moment();\r\n  \r\n    console.log(\"Current Time: \", currentTime.format());\r\n    console.log(\"Appointment Time: \", appointmentTime.format());\r\n  \r\n    if (appointmentTime.isAfter(currentTime)) {\r\n      const totalMs = appointmentTime.diff(currentTime);\r\n  \r\n      const msPerDay = 1000 * 60 * 60 * 24;\r\n      const msPerHour = 1000 * 60 * 60;\r\n      const msPerMinute = 1000 * 60;\r\n      const msPerSecond = 1000;\r\n  \r\n      const days = Math.floor(totalMs / msPerDay);\r\n      const hours = Math.floor((totalMs % msPerDay) / msPerHour);\r\n      const minutes = Math.floor((totalMs % msPerHour) / msPerMinute);\r\n      const seconds = Math.floor((totalMs % msPerMinute) / msPerSecond);\r\n  \r\n      let timeRemaining = \"\";\r\n  \r\n      if (days > 0) {\r\n        timeRemaining = `${days} day(s) ${hours} hour(s) left`;\r\n      } else if (hours > 0) {\r\n        timeRemaining = `${hours} hour(s) ${minutes} minute(s) left`;\r\n      } else if (minutes > 0) {\r\n        timeRemaining = `${minutes} minute(s) ${seconds} second(s) left`;\r\n      } else {\r\n        timeRemaining = `${seconds} second(s) left`;\r\n      }\r\n  \r\n      setCountdown(timeRemaining);\r\n    } else {\r\n      setCountdown(\"Your appointment has already passed.\");\r\n    }\r\n  };\r\n  \r\n\r\n  const initClient = () => {\r\n    console.log(\"Initializing Google API Client...\");\r\n\r\n    gapi.client\r\n      .init({\r\n        apiKey: API_KEY,\r\n        clientId: CLIENT_ID,\r\n        discoveryDocs: [\r\n          \"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\",\r\n        ],\r\n        scope: SCOPES,\r\n      })\r\n      .then(() => {\r\n        console.log(\"gapi client initialized.\");\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error initializing gapi client: \", error);\r\n      });\r\n  };\r\n\r\n  const eventsForDays = events.reduce((acc, event) => {\r\n    const eventDate = new Date(event.start.dateTime || event.start.date);\r\n    const dateKey = eventDate.toLocaleDateString();\r\n    if (!acc[dateKey]) {\r\n      acc[dateKey] = [];\r\n    }\r\n    acc[dateKey].push(event);\r\n    return acc;\r\n  }, {});\r\n\r\n  useEffect(() => {\r\n    // Fetch patient profile when the component mounts\r\n    gapi.load(\"client:auth2\", initClient);\r\n    GetPatientProfile();\r\n\r\n    // Set interval to update the countdown every second\r\n    // const interval = setInterval(() => {\r\n    //   if (events.length > 0) {\r\n    //     updateCountdown(events[0].dateTime); // Update countdown for the first event\r\n    //   }\r\n    // }, 1000);\r\n\r\n    // // Clean up the interval when the component unmounts\r\n    // return () => clearInterval(interval);\r\n  }, [events]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <main>\r\n        <div className=\"mb-4 pb-4\"></div>\r\n        <section className=\"about-us container\">\r\n          <div className=\"mw-930\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-6\">\r\n                <h2 className=\"page-title\">All Your Appointment</h2>\r\n              </div>\r\n              <div className=\"col-md-6\">\r\n                <p\r\n                  className=\"page-title\"\r\n                  style={{\r\n                    textAlign: \"right\",\r\n                    fontSize: \"25px\",\r\n                    fontWeight: \"600\",\r\n                    marginTop: \"2%\",\r\n                  }}\r\n                >\r\n                  Upcoming Appointment: {countdown}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"container\" style={{ marginBottom: \"10%\" }}>\r\n          <div className=\"row\">\r\n            <div className=\"col-md-12\">\r\n              <div\r\n                className=\"calendar-container\"\r\n                style={{ width: \"100%\", maxWidth: \"100%\", padding: 0 }}\r\n              >\r\n                <Calendar\r\n                  tileContent={({ date, view }) => {\r\n                    const dateKey = date.toLocaleDateString();\r\n                    if (eventsForDays[dateKey]) {\r\n                      return (\r\n                        <ul\r\n                          style={{\r\n                            margin: 0,\r\n                            padding: 0,\r\n                            fontSize: \"10px\",\r\n                            marginTop: \"10%\",\r\n                          }}\r\n                        >\r\n                          {eventsForDays[dateKey].map((event) => (\r\n                            <li\r\n                              key={event.id}\r\n                              style={{ color: \"blue\", fontSize: \"12px\" }}\r\n                            >\r\n                              {event.summary}\r\n                            </li>\r\n                          ))}\r\n                        </ul>\r\n                      );\r\n                    }\r\n                    return null;\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PatientViewAppointment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}